#include <stdio.h>
#include <stdlib.h>
#include <sys/wait.h>
#include <unistd.h>
#include <string.h>
#include <dirent.h>

int cdcomm(char input[]);
int exitcomm(char input[]);
int pwdcomm(char input[]);

char * cmdstr[] = {"pwd", "cd", "exit", NULL};
int (*funct[]) (char[]) = {pwdcomm, cdcomm, exitcomm};



int pwdcomm(char input[])
{
    char buffer[200];
    getcwd(buffer, 200);
    printf("%s\n", buffer);
    return 0;
}

int cdcomm(char input[])
{
    char *loc = strchr(input, ' ');  // pointer to the space
    if(loc == NULL)
    {
        return 1;
    }
    char *path = loc + 1; 
    if(chdir(path)) // if the path does not exist, the function fails
    {
        return 1;
    }
    return 0;
}

int exitcomm(char input[])
{
    exit(0);
    return 0;
}

int main()
{
    char str[100] = {0};
    while(1)
    {
        fgets(str, 100, stdin); //Receive shell input
        if(str == NULL)
        {
            printf("gets command failed: string input is null.\n");
            exit(1);
        }
        str[strlen(str) - 1] = '\0'; // Get rid of the newline in the string
        int funcbool = 0;
        for(int i = 0; cmdstr[i] != NULL; ++i)
        {
            char * charptr = strchr(str, ' ');
            if (charptr != NULL)
            {
                *charptr = '\0';
                if(!strcmp(str, cmdstr[i]))
                {
                    funcbool = 1;
                    *charptr = ' ';
                    funct[i](str);
                    break;
                }
                *charptr = ' ';
            }
            else if(!strcmp(str, cmdstr[i]))
            {
                funcbool = 1;
                funct[i](str);
                break;
            }
        }
        if(!funcbool)
        {
            pid_t procID = fork();
            if(!procID) //child process
            {
                int count = 0;
                int index;
                for(index = 0; str[index]; ++index) // str[index] means str[index] != NULL b/c NULL is 0.                
                {
                    count += (str[index] == ' '); // if statement
                }
                char **argumentv = calloc(count + 2, sizeof(char*));
                char *token = strtok(str, " ");
                char *command = token;
                int indexv = 0;
                while(token)
                {
                    argumentv[indexv++] = token;
                    token = strtok(NULL, " ");
                }
                execvp(command, argumentv);
                exit(1); // makes sure that the child process dies
            }
            // back to parent process
            int exitstatus;
            wait(&exitstatus);
            WEXITSTATUS(exitstatus);
        printf("%s\n", str);
    }
}
